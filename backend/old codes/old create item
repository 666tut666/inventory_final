@router.post("/create-an-item")
async def create_an_item(
        request: Request,
        db: Session = Depends(get_db)
):
    form = await request.form()
    #id = Optional[form.get("id")]
    title = form.get("title")
    item_type = form.get("item_type")
    category = form.get("category")
    quantity = form.get("quantity")
    creation_date = form.get("creation_date")



    errors = []
        #we need to define error dictionary
        #it`ll store errors
    if not title or len(title) < 2:
        errors.append("Title should be greater than two character")
    if not item_type or len(item_type) < 3:
        errors.append("type should be be more than three characters")
    if not quantity:
        errors.append("Quantity should be be more than three characters")
    if not category or len(category) < 3:
        errors.append("Category should be be more than three characters")



    #reload page showing what error, SO
    if len(errors) > 0:
        return templates.TemplateResponse(
            "create_item.html",
            {
                "request": request,
                "errors": errors
            }
        )
    #{....} passing context dict, request and showing error

    try:
        token = request.cookies.get("access_token")
        if not token:
            errors.append("Please Login first")
            return templates.TemplateResponse(
                "login.html",
                {
                    "request":request,
                    "errors":errors
                }
            )
        scheme, _, param = token.partition(" ")
        payload = jwt.decode(param, setting.SECRET_KEY, algorithms=setting.ALGORITHM)
        email = payload.get("sub")
        print(token)
        print(email)
        if email is None:
            errors.append("Kindly login first, you are not authenticated")
            return templates.TemplateResponse(
                "login.html", {"request": request, "errors": errors}
            )
        else:
            admin = db.query(Admin).filter(Admin.email==email).first()
            if admin is None:
                errors.append("You aren`t authenticated, Please login")
                return templates.TemplateResponse(
                    "create_item.html",
                    {
                        "request":request,
                        "errors":errors
                    }
                )
            else:
                #if admin is not none
                #admin exists and is logged in
                item = Item(
                    title=title,
                    item_type=item_type,
                    category=category,
                    quantity=quantity,
                    creation_date=datetime.date.today(),

                )
                db.add(item)
                db.commit()
                db.refresh(item)
                return responses.RedirectResponse(
                    f"/detail/{item.id}",
                )
    except Exception as e:
        print(e)
